import java.util.*;

class BFSShortestPath {
    // Function to find the shortest path using BFS
    static List<Integer> bfsShortestPath(Map<Integer, List<Integer>> graph, int start, int target) {
        Queue<List<Integer>> queue = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();

        // Start BFS with the starting node
        queue.add(Arrays.asList(start));
        visited.add(start);

        while (!queue.isEmpty()) {
            List<Integer> path = queue.poll();
            int lastNode = path.get(path.size() - 1);

            // If target node is reached, return the path
            if (lastNode == target) {
                return path;
            }

            // Explore neighbors
            for (int neighbor : graph.get(lastNode)) {
                if (!visited.contains(neighbor)) {
                    visited.add(neighbor);
                    List<Integer> newPath = new ArrayList<>(path);
                    newPath.add(neighbor);
                    queue.add(newPath);
                }
            }
        }
        return new ArrayList<>(); // Return empty list if no path found
    }

    public static void main(String[] args) {
        // Define the given graph as an adjacency list
        Map<Integer, List<Integer>> graph = new HashMap<>();
        graph.put(0, Arrays.asList(1, 2));
        graph.put(1, Arrays.asList(0, 3));
        graph.put(2, Arrays.asList(0, 3));
        graph.put(3, Arrays.asList(1, 2));

        int start = 0, target = 3;
        List<Integer> shortestPath = bfsShortestPath(graph, start, target);

        // Print the shortest path
        if (shortestPath.isEmpty()) {
            System.out.println("No path found.");
        } else {
            System.out.println("Shortest path from " + start + " to " + target + ": " + shortestPath);
        }
    }
}
